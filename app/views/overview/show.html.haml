/ Content Header (Page header)
%section.content-header
  %h1
    Overview
  %ol.breadcrumb.breadcrumb-as-navigation
    %li.active View Past:
    - Reporter::PAST_OPTIONS.each do |option|
      %li= link_to option[:label], dynamic_report_url(:past => option[:past])
- if selected_filters.present?
  %section.content-header
    - selected_filters.each_pair do |key, value|
      = link_to dynamic_report_url(:without => key), :class => "btn btn-info btn-sm", :title => value do
        = key
        \: #{truncate(value, :length => 40)}
        %i.fa.fa-remove
/ Main content

%section.content
  .row
    %section.col-lg-12.connectedSortable
      .box
        .box-header
          %i.fa.fa-clock
          %h3.box-title Average Request Time
        .box-body
          = react_component("AreaChart", refresh: 15,
                                         legend: "bottom",
                                         curve: false,
                                         points: false,
                                         suffix: "ms",
                                         messages: { empty: "Waiting for data..." },
                                         library: { tooltips: { mode: "index" },
                                                    hover: { mode: "index" },
                                                    scales: { yAxes: [{ stacked: true }]},
                                                    annotation: { annotations: [] }},
                                         data: dynamic_report_url({}, { url: "/api/v1/stats/average_duration",
                                                                        application_id: @current_application.id,
                                                                        type: "web" }))

      .box
        .box-header
          %i.fa.fa-clock
          %h3.box-title Latency
        .box-body
          = react_component("AreaChart", refresh: 15,
                                         legend: "bottom",
                                         curve: false,
                                         points: false,
                                         messages: { empty: "Waiting for data..." },
                                         library: { tooltips: { mode: "index" },
                                                    hover: { mode: "index" },
                                                    scales: { yAxes: [{ stacked: true }] } },
                                         data: dynamic_report_url({}, { url: "/api/v1/stats/latency_bands",
                                                                        application_id: @current_application.id,
                                                                        type: "web" }))

  .row
    %section.col-lg-6.connectedSortable
      = react_component("ControllerDataPanel", url: dynamic_report_url({}, { url: "/api/v1/stats/controllers",
                                                                             application_id: @current_application.id,
                                                                             type: "web" }))

      = react_component("UrlDataPanel", url: dynamic_report_url({}, { url: "/api/v1/stats/urls",
                                                                      application_id: @current_application.id,
                                                                      type: "web" }))

      = react_component("HostDataPanel", url: dynamic_report_url({}, { url: "/api/v1/stats/hosts",
                                                                       application_id: @current_application.id,
                                                                       type: "web" }))

      = react_component("DatabaseDataPanel", url: dynamic_report_url({}, { url: "/api/v1/stats/database_calls",
                                                                           application_id: @current_application.id,
                                                                           type: "web" }))
    %section.col-lg-6.connectedSortable
      = react_component("LayerDataPanel", url: dynamic_report_url({}, { url: "/api/v1/stats/layers",
                                                                        application_id: @current_application.id,
                                                                        type: "web" }))

      = react_component("TraceDataPanel", url: dynamic_report_url({}, { url: "/api/v1/stats/traces",
                                                                        application_id: @current_application.id,
                                                                        type: "web" }),
                                          traces_url: url_for(dynamic_url(@current_application, :traces)))
